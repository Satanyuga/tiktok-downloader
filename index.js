// üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// üîß Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
const app = express();
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('ü§ñ Bot is alive'));
app.get('/ping', (req, res) => res.send('‚úÖ Ping OK'));
app.listen(PORT, () => console.log(`üß† Express —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`));

// üîê Telegram —Ç–æ–∫–µ–Ω –∏–∑ ENV
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
if (!TELEGRAM_TOKEN) throw new Error('‚ùå TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω.');

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// üì¶ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
const queue = [];
let isProcessing = false;

// ‚è∞ –ü–∏–Ω–≥ —Å–∞–º–æ–≥–æ —Å–µ–±—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + –ª–æ–≥
setInterval(() => {
  axios.get("https://tiktokbot-1100.onrender.com/ping")
    .then(() => console.log(`[${new Date().toLocaleTimeString()}] üîÑ –Ø –Ω–µ —Å–ø–ª—é. –ü–∏–Ω–≥–∞–Ω—É–ª Render.`))
    .catch(() => console.log(`[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è –ü–∏–Ω–≥ –Ω–µ –ø—Ä–æ—à—ë–ª.`));
}, 300000);

// üîÑ –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö API (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
const APIs = [
  {
    name: 'tikwm',
    url: (url) => `https://tikwm.com/api/?url=${encodeURIComponent(url)}`,
    parser: (data) => ({
      videoLink: data?.data?.play,
      images: data?.data?.images
    })
  },
  {
    name: 'savetik',
    url: (url) => `https://savetik.co/api/ajaxSearch`,
    method: 'POST',
    data: (url) => ({ q: url, lang: 'en' }),
    parser: (data) => {
      const videoMatch = data?.data?.match(/<a[^>]+href="([^"]+)"[^>]*>Download MP4<\/a>/i);
      return {
        videoLink: videoMatch ? videoMatch[1] : null,
        images: null
      };
    }
  }
];

// üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const url = msg.text?.trim();

  // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ TikTok —Å—Å—ã–ª–∫–∏
  if (!url?.startsWith('http') || !url.includes('tiktok')) {
    return bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–æ –Ω–µ TikTok-—Å—Å—ã–ª–∫–∞. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é.');
  }

  // üì• –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
  queue.push({ chatId, url });
  if (!isProcessing) processQueue();
});

// üîß –§—É–Ω–∫—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ API
async function tryDownload(url) {
  for (const api of APIs) {
    try {
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º API: ${api.name}`);
      
      let response;
      if (api.method === 'POST') {
        response = await axios.post(api.url(url), api.data(url), {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          },
          timeout: 15000
        });
      } else {
        response = await axios.get(api.url(url), {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          },
          timeout: 15000
        });
      }

      const result = api.parser(response.data);
      
      if (result.videoLink || result.images) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ ${api.name}`);
        return result;
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ ${api.name}: ${error.message}`);
      continue;
    }
  }
  
  throw new Error('–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
}

// üîß –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
async function processQueue() {
  isProcessing = true;

  while (queue.length > 0) {
    const { chatId, url } = queue.shift();

    try {
      // üîÑ –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API
      const { videoLink, images } = await tryDownload(url);

      // üñºÔ∏è –ö–∞—Ä—É—Å–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (Array.isArray(images) && images.length > 0) {
        await bot.sendMessage(chatId, `üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –≥–∞–ª–µ—Ä–µ—è: ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

        for (let i = 0; i < images.length; i++) {
          const imgUrl = images[i];
          const filename = `img_${Date.now()}_${i}.jpg`;
          const imgPath = path.resolve(__dirname, filename);

          const stream = await axios.get(imgUrl, { 
            responseType: 'stream',
            timeout: 30000,
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
          });
          const writer = fs.createWriteStream(imgPath);
          stream.data.pipe(writer);

          await new Promise((res, rej) => {
            writer.on('finish', res);
            writer.on('error', rej);
          });

          await bot.sendPhoto(chatId, imgPath);
          fs.unlinkSync(imgPath);
        }

      // üé• –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
      } else if (videoLink) {
        const filename = `video_${Date.now()}.mp4`;
        const videoPath = path.resolve(__dirname, filename);

        const stream = await axios.get(videoLink, { 
          responseType: 'stream',
          timeout: 60000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://www.tiktok.com/'
          }
        });
        const writer = fs.createWriteStream(videoPath);
        stream.data.pipe(writer);

        await new Promise((res, rej) => {
          writer.on('finish', res);
          writer.on('error', rej);
        });

        await bot.sendVideo(chatId, videoPath, { caption: 'üé¨ –í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ –∏–∑ TikTok' });
        fs.unlinkSync(videoPath);

      } else {
        // ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        await bot.sendMessage(chatId, 'üì≠ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

    } catch (err) {
      console.error(`üî• –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è URL ${url}:`, err.message);
      await bot.sendMessage(chatId, `üî• –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    }

    // ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(r => setTimeout(r, 3000));
  }

  isProcessing = false;
}

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
(async () => {
  try {
    const me = await bot.getMe();
    console.log(`ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @${me.username}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getMe:', err.message);
  }
})();

// üí§ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ SIGINT/SIGTERM
process.once('SIGINT', () => {
  console.log('üß® SIGINT. –ó–∞–≤–µ—Ä—à–∞–µ–º...');
  process.exit(0);
});
process.once('SIGTERM', () => {
  console.log('üî™ SIGTERM. –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ...');
  process.exit(0);
});
